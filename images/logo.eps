%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2437 438
%%HiResBoundingBox: 0 0 2436.96 438
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2436.96 438 re
W
q
[0.24 0 0 -0.24 0 438] cm
q
0 0 10154.166 1824.6256 re
W*
q
[34.835377 0 0 34.859623 348.78998 3.173647] cm
/DeviceRGB {} CS
[0.9529 0.2078 0.2078] SC
/DeviceRGB {} cs
[0.9529 0.2078 0.2078] sc
29.24 12.04 m
29.24 13.08 l
28.360001 13.08 27.559999 13.36 27.52 14.08 c
27.52 40.200001 l
24.639999 40.200001 l
6.879999 20.16 l
6.879999 38.119999 l
6.919999 38.84 7.719999 39.119999 8.599999 39.119999 c
8.599999 40.200001 l
1.199999 40.200001 l
1.199999 39.119999 l
2.079999 39.119999 2.879999 38.84 2.919999 38.119999 c
2.919999 14.079998 l
2.879999 13.359998 2.079999 13.079998 1.199999 13.079998 c
1.199999 12.039998 l
5.279999 12.039998 l
23.879999 32.599998 l
23.879999 14.079998 l
23.839998 13.359998 23.039999 13.079998 22.16 13.079998 c
22.16 12.039998 l
29.24 12.039998 l
29.24 12.04 l
h
50.384998 41.040001 m
42.224998 41.040001 36.424999 34.240002 36.424999 25.880001 c
36.424999 17.920002 42.224998 11.120001 50.384998 11.120001 c
58.504997 11.120001 64.305 17.920002 64.305 25.880001 c
64.305 34.240002 58.505001 41.040001 50.385002 41.040001 c
50.384998 41.040001 l
h
50.544998 38.84 m
55.984997 38.84 59.144997 32.68 59.144997 25.880001 c
59.144997 19.52 55.984997 13.360001 50.544998 13.360001 c
45.105 13.360001 41.945 19.52 41.945 25.880001 c
41.945 32.68 45.105 38.84 50.544998 38.84 c
h
89.169998 34.68 m
90.529999 34.68 l
90.529999 40.200001 l
71.290001 40.200001 l
71.290001 39.16 l
72.129997 39.16 72.970001 38.84 73.010002 38.040001 c
73.010002 13.76 l
73.050003 12.96 72.209999 12.64 71.290001 12.64 c
71.290001 11.6 l
79.010002 11.6 l
79.010002 12.64 l
78.130005 12.64 77.370003 12.92 77.290001 13.6 c
77.330002 37.400002 l
86.25 37.400002 l
88.290001 37.400002 89.129997 35.480003 89.169998 34.68 c
h
77.290001 13.64 m
77.290001 13.76 l
77.290001 13.64 l
h
114.794998 34.68 m
116.154999 34.68 l
116.154999 40.200001 l
96.915001 40.200001 l
96.915001 39.16 l
97.754997 39.16 98.595001 38.84 98.635002 38.040001 c
98.635002 13.76 l
98.675003 12.96 97.834999 12.64 96.915001 12.64 c
96.915001 11.6 l
104.635002 11.6 l
104.635002 12.64 l
103.755005 12.64 102.995003 12.92 102.915001 13.6 c
102.955002 37.400002 l
111.875 37.400002 l
113.915001 37.400002 114.754997 35.480003 114.794998 34.68 c
h
102.915001 13.64 m
102.915001 13.76 l
102.915001 13.64 l
h
148.860001 11.56 m
148.860001 12.96 l
148.419998 12.96 147.300003 12.84 146.5 13.64 c
137.580002 27.040001 l
137.580002 38.040001 l
137.540009 38.84 138.380005 39.16 139.300003 39.16 c
139.300003 40.200001 l
131.059998 40.200001 l
131.059998 39.16 l
131.899994 39.16 132.660004 38.880001 132.779999 38.240002 c
132.940002 27.040001 l
123.419998 13.760001 l
123.379997 13.720001 123.379997 13.640001 123.339996 13.600001 c
123.259995 13.480001 l
122.739998 12.840001 121.979996 12.880001 121.539993 12.880001 c
121.539993 11.440001 l
129.859985 11.440001 l
129.859985 12.880001 l
129.37999 12.880001 128.61998 12.880001 128.859985 13.680001 c
135.499985 23.280003 l
142.059982 13.760002 l
142.579987 12.920002 141.419983 12.960002 140.939987 12.960002 c
140.939987 11.520002 l
148.860001 11.56 l
h
132.779999 38.16 m
132.779999 38.040001 l
132.779999 38.16 l
h
168.645 25.92 m
168.645 29.440001 l
155.044998 29.440001 l
155.044998 25.92 l
168.645 25.92 l
h
195.47 11.64 m
195.47 17.120001 l
194.11 17.120001 l
194.07001 16.360001 193.23 14.440001 191.19 14.400001 c
181.67 14.400001 l
181.67 24.560001 l
190.14999 24.560001 l
191.42999 24.440001 191.98999 24.040001 192.03 23.080002 c
192.99001 23.080002 l
192.99001 28.400002 l
192.03 28.400002 l
191.99001 27.440002 191.42999 27.040001 190.14999 26.920002 c
181.62999 26.920002 l
181.62999 38.040001 l
181.59 38.84 182.42999 39.16 183.34999 39.16 c
183.34999 40.200001 l
175.62999 40.200001 l
175.62999 39.16 l
176.54999 39.16 177.38998 38.84 177.34999 38.040001 c
177.34999 13.800001 l
177.31 13.000001 176.46999 12.680001 175.62999 12.680001 c
175.62999 11.640001 l
195.46999 11.640001 l
195.47 11.64 l
h
220.33501 34.68 m
221.69501 34.68 l
221.69501 40.200001 l
202.455 40.200001 l
202.455 39.16 l
203.295 39.16 204.13499 38.84 204.175 38.040001 c
204.175 13.76 l
204.215 12.96 203.375 12.64 202.455 12.64 c
202.455 11.6 l
210.175 11.6 l
210.175 12.64 l
209.295 12.64 208.535 12.92 208.455 13.6 c
208.495 37.400002 l
217.41499 37.400002 l
219.45499 37.400002 220.295 35.480003 220.33499 34.68 c
220.33501 34.68 l
h
208.455 13.64 m
208.455 13.76 l
208.455 13.64 l
h
235.75999 12.68 m
234.87999 12.68 234.03999 13 234.03999 13.8 c
234.03999 38.040001 l
234.03999 38.84 234.87999 39.16 235.75999 39.16 c
235.75999 40.200001 l
227.87999 40.200001 l
227.87999 39.16 l
228.75999 39.16 229.59999 38.84 229.59999 38.040001 c
229.59999 13.800001 l
229.59999 13.000001 228.75999 12.680001 227.87999 12.680001 c
227.87999 11.640001 l
235.75999 11.640001 l
235.75999 12.680001 l
235.75999 12.68 l
h
268.505 38.119999 m
269.10501 38.799999 269.82501 38.759998 270.26501 38.759998 c
270.26501 40.199997 l
261.785 40.199997 l
261.785 38.759998 l
262.22501 38.759998 263.10501 38.759998 262.82501 38.039997 c
256.22501 28.359997 l
250.145 38.119995 l
249.825 38.799995 250.785 38.759995 251.22501 38.759995 c
251.22501 40.199993 l
243.54501 40.199993 l
243.54501 38.759995 l
244.02501 38.759995 245.10501 38.879993 245.86502 37.879993 c
245.78502 38.039993 l
254.10501 25.639994 l
245.86501 13.319994 l
245.30501 12.839994 244.505 12.879994 244.10501 12.879994 c
244.10501 11.439995 l
252.34502 11.439995 l
252.34502 12.879995 l
251.86502 12.879995 251.14502 12.879995 251.42502 13.719996 c
251.38503 13.679996 l
256.90503 21.999996 l
262.90503 13.559997 l
263.10504 12.919996 262.10504 12.959996 261.66504 12.959996 c
261.66504 11.519997 l
269.34503 11.559997 l
269.34503 12.959996 l
268.86502 12.959996 267.86502 12.839996 267.10504 13.839996 c
267.22504 13.559997 l
259.26505 24.959995 l
268.505 38.119999 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
